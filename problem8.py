"""
Project Euler - Problem 8
http://projecteuler.net/problem=8
Find the greatest product of five consecutive digits in the 1000-digit number:
73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450
"""

import time

x = int('731671765313306249192251196744265747423553491949349698352031277450' +
        '632623957831801698480186947885184385861560789112949495459501737958' +
        '331952853208805511125406987471585238630507156932909632952274430435' +
        '576689664895044524452316173185640309871112172238311362229893423380' +
        '308135336276614282806444486645238749303589072962904915604407723907' +
        '138105158593079608667017242712188399879790879227492190169972088809' +
        '377665727333001053367881220235421809751254540594752243525849077116' +
        '705560136048395864467063244157221553975369781797784617406495514929' +
        '086256932197846862248283972241375657056057490261407972968652414535' +
        '100474821663704844031998900088952434506585412275886668811642717147' +
        '992444292823086346567481391912316282458617866458359124566529476545' +
        '682848912883142607690042242190226710556263211111093705442175069416' +
        '589604080719840385096245544436298123098787992724428490918884580156' +
        '166097919133875499200524063689912560717606058861164671094050775410' +
        '022569831552000559357297257163626956188267042825248360082325753042' +
        '0752963450')


def compute_product(n):
    """
    Processes each chunk of 5 digits and returns the product of these 5 digits
    If there is a zero on the sequence, even at the most significative digit,
    e.g., the left-most digit, the result will be zero
    """
    a = 1
    for m in range(1, 6, 1):
        a *= n % 10
        n //= 10
    return a


def greatest_product(x):
    """
    Finds the greatest product of 5 consecutive digits in the 1000-digit number
    """
    largest = 1
    product = 1
    for n in range(1, 997, 1):
        product = compute_product(x % (10 ** 5))
        if product > largest:
            largest = product
        product = 1
        x //= 10
    print('largest is', largest)


def elapsed_time(elapsed):
    """
    Computes the amount of time spent by the algorithm and outputs the time
    """
    min = int(elapsed / 60)  # minutes
    s = int(elapsed) % 60  # seconds
    ms = int(elapsed * 1000) - ((int(elapsed) % 60) * 1000)  # milliseconds
    print('time:', elapsed, 's ~', min, 'min,', s, 's,', ms, 'ms')

start = time.time()
greatest_product(x)
elapsed_time(time.time() - start)
